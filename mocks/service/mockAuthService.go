// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/bshadmehr76/vgang-auth/service (interfaces: AuthService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/bshadmehr76/vgang-auth/domain"
	dto "gitlab.com/bshadmehr76/vgang-auth/dto"
	errs "github.com/golang-trading-signal/libs/errs"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthService) ChangePassword(arg0 dto.ChangePassRequest, arg1 *domain.User) (*dto.ChangePassResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*dto.ChangePassResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthServiceMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthService)(nil).ChangePassword), arg0, arg1)
}

// ForgetPass mocks base method.
func (m *MockAuthService) ForgetPass(arg0 dto.ForgetPassRequest) (*dto.ForgetPassResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgetPass", arg0)
	ret0, _ := ret[0].(*dto.ForgetPassResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ForgetPass indicates an expected call of ForgetPass.
func (mr *MockAuthServiceMockRecorder) ForgetPass(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetPass", reflect.TypeOf((*MockAuthService)(nil).ForgetPass), arg0)
}

// GetOtp mocks base method.
func (m *MockAuthService) GetOtp(arg0 dto.GetOtpRequest) (*dto.GetOtpResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtp", arg0)
	ret0, _ := ret[0].(*dto.GetOtpResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetOtp indicates an expected call of GetOtp.
func (mr *MockAuthServiceMockRecorder) GetOtp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtp", reflect.TypeOf((*MockAuthService)(nil).GetOtp), arg0)
}

// Login mocks base method.
func (m *MockAuthService) Login(arg0 dto.LoginRequest) (*dto.LoginResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), arg0)
}

// Logout mocks base method.
func (m *MockAuthService) Logout(arg0 domain.AccessToken) (*dto.LogoutResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(*dto.LogoutResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), arg0)
}

// Signup mocks base method.
func (m *MockAuthService) Signup(arg0 dto.SignupRequest) (*dto.SignupResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0)
	ret0, _ := ret[0].(*dto.SignupResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthServiceMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthService)(nil).Signup), arg0)
}

// Verify mocks base method.
func (m *MockAuthService) Verify(arg0 dto.VerifyTokenRequest) (*dto.VerifyTokenResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(*dto.VerifyTokenResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthServiceMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthService)(nil).Verify), arg0)
}
