// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/bshadmehr76/vgang-auth/domain (interfaces: AccessTokenRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/bshadmehr76/vgang-auth/domain"
	errs "gitlab.com/bshadmehr76/vgang-auth/errs"
)

// MockAccessTokenRepository is a mock of AccessTokenRepository interface.
type MockAccessTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenRepositoryMockRecorder
}

// MockAccessTokenRepositoryMockRecorder is the mock recorder for MockAccessTokenRepository.
type MockAccessTokenRepositoryMockRecorder struct {
	mock *MockAccessTokenRepository
}

// NewMockAccessTokenRepository creates a new mock instance.
func NewMockAccessTokenRepository(ctrl *gomock.Controller) *MockAccessTokenRepository {
	mock := &MockAccessTokenRepository{ctrl: ctrl}
	mock.recorder = &MockAccessTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenRepository) EXPECT() *MockAccessTokenRepositoryMockRecorder {
	return m.recorder
}

// IsAuthorized mocks base method.
func (m *MockAccessTokenRepository) IsAuthorized(arg0 domain.AccessToken, arg1 string, arg2 map[string]string) (bool, *jwt.MapClaims) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*jwt.MapClaims)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockAccessTokenRepositoryMockRecorder) IsAuthorized(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAccessTokenRepository)(nil).IsAuthorized), arg0, arg1, arg2)
}

// Logout mocks base method.
func (m *MockAccessTokenRepository) Logout(arg0 domain.AccessToken) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAccessTokenRepositoryMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAccessTokenRepository)(nil).Logout), arg0)
}
